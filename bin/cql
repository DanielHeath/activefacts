#! /usr/bin/env ruby
#
#       ActiveFacts: Interactive CQL command-line. Incomplete; only parses CQL and shows the parse trees
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
require 'readline'

# Load the ruby debugger before everything else, if requested
if d = ENV['DEBUG'] and d.split(/,/).include?('debug')
  begin
    require 'ruby-debug'
    Debugger.start(:post_mortem => true)        # Stop when an exception is thrown, but before it's rescued
  rescue LoadError
    # Ok, no debugger, tough luck.
  end
end

require 'activefacts'
require 'activefacts/cql/compiler'

puts "This is a stub for the CQL interactive commandline. At the moment it only parses CQL and shows the parse trees."

class InteractiveCQL < ActiveFacts::CQL::Compiler
  def initialize *a
    @show_tree = false  # Show the raw Treetop parse tree
    super *a
    self.root = :definition
  end

  def metacommand(line)
    # meta-commands start with /
    case (words = line.split).shift
    when "/tree"
      @show_tree = !@show_tree
      puts "Will #{@show_tree ? "" : "not "}show the parse tree"
    when "/root"
      self.root = words[0] && words[0].to_sym || :definition
      puts "Looking for a #{self.root}"
    else
      puts "Unknown metacommand #{line}, did you mean /root <rule>?"
    end
  end

  def process(statement)
    begin
      @results = []
      compile(statement)
      puts(@results.map{|r| "\t"+r.inspect}*"\n")
    rescue => e
      puts e
      puts "\t"+e.backtrace*"\n\t" if ENV["DEBUG"] =~ /exception/
    end
  end

  def compile_definition ast
    # Accumulate the results:
    p ast if @show_tree
    @results += Array(result = super)
    result
  end

end

compiler = InteractiveCQL.new
statement = nil
while line = Readline::readline(statement ? "CQL+ " : "CQL? ", [])
  statement = statement ? statement + "\n"+line : line
  if line =~ %r{\A/}
    compiler.metacommand(line)
    statement = nil
  elsif compiler.root != :definition or
      line.gsub(/(['"])([^\1\\]|\\.)*\1/,'') =~ /;/
    # After stripping string literals the line contains a ';', we've found the last line of the command:
    compiler.process(statement)
    statement = nil
  end
end
puts

