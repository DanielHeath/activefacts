
module Aggregation
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'aggregation_id'

    # Variable is bound to Aggregate over aggregated-Variable
    belongs_to :aggregated_variable, :class_name => 'Variable'

    # Variable is bound to Aggregate over aggregated-Variable
    belongs_to :variable
  end
end

module AllowedRange
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'allowed_range_id'

    # Value Constraint allows Value Range and Value Constraint is a kind of Constraint
    belongs_to :value_constraint_constraint, :class_name => 'Constraint'

    # Value Constraint allows Value Range and Value Range has maximum-Bound and Bound has Value and Value is in Unit
    belongs_to :value_range_maximum_bound_value_unit, :class_name => 'Unit'

    # Value Constraint allows Value Range and Value Range has minimum-Bound and Bound has Value and Value is in Unit
    belongs_to :value_range_minimum_bound_value_unit, :class_name => 'Unit'
  end
end

module AlternativeSet
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'guid'

    # Step falls under Alternative Set
    has_many :steps, :foreign_key => :alternative_set_guid, :dependent => :destroy
  end
end

module Constraint
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'concept_guid'

    # Ring Constraint is a kind of Constraint and Ring Constraint has other-Role
    belongs_to :ring_constraint_other_role, :class_name => 'Role'

    # Ring Constraint is a kind of Constraint and Role is of Ring Constraint
    belongs_to :ring_constraint_role, :class_name => 'Role'

    # Value Constraint is a kind of Constraint and Role has role-Value Constraint
    belongs_to :value_constraint_role, :class_name => 'Role'

    # Presence Constraint is a kind of Constraint and Presence Constraint covers Role Sequence
    belongs_to :presence_constraint_role_sequence, :class_name => 'RoleSequence'

    # Set Constraint is a kind of Constraint and Subset Constraint is a kind of Set Constraint and Subset Constraint covers subset-Role Sequence
    belongs_to :subset_constraint_subset_role_sequence, :class_name => 'RoleSequence'

    # Set Constraint is a kind of Constraint and Subset Constraint is a kind of Set Constraint and Subset Constraint covers superset-Role Sequence
    belongs_to :subset_constraint_superset_role_sequence, :class_name => 'RoleSequence'

    # Value Constraint is a kind of Constraint
    # REVISIT: [reference from Allowed Range to Value Constraint in 'Value Constraint allows Value Range', reference from Value Constraint to Constraint in 'Value Constraint is a kind of Constraint']
    has_one :value_constraint, :foreign_key => :value_constraint_guid, :dependent => :destroy

    # Value Constraint is a kind of Constraint
    # REVISIT: [reference from Object Type to Domain Object Type in 'Domain Object Type is a kind of Object Type', reference from Domain Object Type to Value Type in 'Value Type is a kind of Domain Object Type', reference from Value Type to Value Constraint in 'Value Type has Value Constraint', reference from Value Constraint to Constraint in 'Value Constraint is a kind of Constraint']
    has_one :value_constraint, :foreign_key => :value_type_value_constraint_guid, :dependent => :destroy

    # Set Constraint is a kind of Constraint
    # REVISIT: [reference from Set Comparison Roles to Set Comparison Constraint in 'Set Comparison Constraint has in Ordinal position Role Sequence', reference from Set Comparison Constraint to Set Constraint in 'Set Comparison Constraint is a kind of Set Constraint', reference from Set Constraint to Constraint in 'Set Constraint is a kind of Constraint']
    has_one :set_constraint, :foreign_key => :set_comparison_constraint_guid, :dependent => :destroy

    # Constraint Shape is for Constraint
    # REVISIT: [reference from Shape to Constraint Shape in 'Constraint Shape is a kind of Shape', reference from Constraint Shape to Constraint in 'Constraint Shape is for Constraint']
    has_many :constraint_shapes, :foreign_key => :constraint_shape_constraint_guid, :dependent => :destroy
  end
end

module ContextAccordingTo
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'context_according_to_id'

    # Context Note is according to Agent
    belongs_to :context_note
  end
end

module ContextAgreedBy
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'context_agreed_by_id'

    # Agreement was reached by Agent and Context Note was added by Agreement
    belongs_to :agreement_context_note, :class_name => 'ContextNote'
  end
end

module ContextNote
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'concept_guid'

    # Context Note is according to Agent
    has_many :context_according_tos, :foreign_key => :context_note_guid, :dependent => :destroy

    # Context Note was added by Agreement
    # REVISIT: [reference from Context Agreed By to Agreement in 'Agreement was reached by Agent', reference from Agreement to Context Note in 'Context Note was added by Agreement']
    has_one :agreement, :foreign_key => :agreement_guid, :dependent => :destroy

    # Model Note Shape is for Context Note
    # REVISIT: [reference from Shape to Model Note Shape in 'Model Note Shape is a kind of Shape', reference from Model Note Shape to Context Note in 'Model Note Shape is for Context Note']
    has_many :model_note_shapes, :foreign_key => :model_note_shape_context_note_guid, :dependent => :destroy
  end
end

module Derivation
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'derived_unit_guid'

    # Unit is derived from base-Unit
    belongs_to :base_unit, :class_name => 'Unit'

    # Unit is derived from base-Unit
    belongs_to :derived_unit, :class_name => 'Unit'
  end
end

module Diagram
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'diagram_id'

    # ORM Diagram is a kind of Diagram
    # REVISIT: [reference from Shape to ORM Diagram in 'Shape is in ORM Diagram', reference from ORM Diagram to Diagram in 'ORM Diagram is a kind of Diagram']
    has_one :orm_diagram, :foreign_key => :orm_diagram_id, :dependent => :destroy
  end
end

module FacetValue
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'facet_value_id'

    # Value Type defines Facet as having Value and Value Type has facet called Name and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
    belongs_to :facet_value_type_object_type, :class_name => 'ObjectType'

    # Value Type defines Facet as having Value and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
    belongs_to :value_type_object_type, :class_name => 'ObjectType'

    # Value Type defines Facet as having Value and Value is in Unit
    belongs_to :value_unit, :class_name => 'Unit'
  end
end

module Fact
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'concept_guid'

    # Fact is of Fact Type
    belongs_to :fact_type

    # Population includes Fact
    belongs_to :population

    # Instance objectifies Fact
    has_one :instance, :foreign_key => :fact_guid, :dependent => :destroy

    # Role Value fulfils Fact
    has_many :role_values, :foreign_key => :fact_guid, :dependent => :destroy
    has_many :roles, :through => :role_values
  end
end

module FactType
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'concept_guid'

    # Entity Type nests Fact Type and Entity Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
    belongs_to :entity_type_object_type, :class_name => 'ObjectType'

    # Type Inheritance is a kind of Fact Type and Entity Type is subtype of super-Entity Type and Entity Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
    belongs_to :type_inheritance_subtype_object_type, :class_name => 'ObjectType'

    # Type Inheritance is a kind of Fact Type and Entity Type is subtype of super-Entity Type and Entity Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
    belongs_to :type_inheritance_supertype_object_type, :class_name => 'ObjectType'

    # Fact is of Fact Type
    has_many :facts, :foreign_key => :fact_type_guid, :dependent => :destroy

    # Fact Type has Reading
    has_many :readings, :foreign_key => :fact_type_guid, :dependent => :destroy

    # Role belongs to Fact Type
    has_many :roles, :foreign_key => :fact_type_guid, :dependent => :destroy

    # Implicit Fact Type is a kind of Fact Type
    # REVISIT: [reference from Role to Implicit Fact Type in 'Implicit Fact Type is implied by Role', reference from Implicit Fact Type to Fact Type in 'Implicit Fact Type is a kind of Fact Type']
    has_one :implicit_fact_type, :foreign_key => :implicit_fact_type_guid, :dependent => :destroy

    # Fact Type Shape is for Fact Type
    # REVISIT: [reference from Shape to Fact Type Shape in 'Fact Type Shape is a kind of Shape', reference from Fact Type Shape to Fact Type in 'Fact Type Shape is for Fact Type']
    has_many :fact_type_shapes, :foreign_key => :fact_type_shape_fact_type_guid, :dependent => :destroy

    # Ring Constraint Shape is attached to Fact Type
    # REVISIT: [reference from Shape to Constraint Shape in 'Constraint Shape is a kind of Shape', reference from Constraint Shape to Ring Constraint Shape in 'Ring Constraint Shape is a kind of Constraint Shape', reference from Ring Constraint Shape to Fact Type in 'Ring Constraint Shape is attached to Fact Type']
    has_many :ring_constraint_shapes, :foreign_key => :ring_constraint_shape_fact_type_guid, :dependent => :destroy

    # Step specifies Fact Type
    has_many :steps, :foreign_key => :fact_type_guid, :dependent => :destroy
  end
end

module Instance
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'concept_guid'

    # Instance objectifies Fact
    belongs_to :fact

    # Instance is of Object Type
    belongs_to :object_type

    # Population includes Instance
    belongs_to :population

    # Instance has Value and Value is in Unit
    belongs_to :value_unit, :class_name => 'Unit'

    # Instance plays Role Value
    has_many :role_values, :foreign_key => :instance_guid, :dependent => :destroy
    has_many :facts, :through => :role_values
    has_many :roles, :through => :role_values
  end
end

module ObjectType
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'object_type_id'

    # Domain Object Type is a kind of Object Type and Value Type is a kind of Domain Object Type and Value Type has Value Constraint and Value Constraint is a kind of Constraint
    belongs_to :value_type_value_constraint_constraint, :class_name => 'Constraint'

    # Domain Object Type is a kind of Object Type and Value Type is a kind of Domain Object Type and Value Type is subtype of super-Value Type and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
    belongs_to :value_type_supertype_object_type, :class_name => 'ObjectType'

    # Domain Object Type is a kind of Object Type and Value Type is a kind of Domain Object Type and Value Type is of Unit
    belongs_to :value_type_unit, :class_name => 'Unit'

    # Domain Object Type is a kind of Object Type
    # REVISIT: [reference from Facet Value to Facet in 'Value Type defines Facet as having Value', reference from Facet to Value Type in 'Value Type has facet called Name', reference from Value Type to Domain Object Type in 'Value Type is a kind of Domain Object Type', reference from Domain Object Type to Object Type in 'Domain Object Type is a kind of Object Type']
    has_one :domain_object_type, :foreign_key => :facet_value_type_object_type_id, :dependent => :destroy

    # Domain Object Type is a kind of Object Type
    # REVISIT: [reference from Facet Value to Value Type in 'Value Type defines Facet as having Value', reference from Value Type to Domain Object Type in 'Value Type is a kind of Domain Object Type', reference from Domain Object Type to Object Type in 'Domain Object Type is a kind of Object Type']
    has_one :domain_object_type, :foreign_key => :value_type_object_type_id, :dependent => :destroy

    # Domain Object Type is a kind of Object Type
    # REVISIT: [reference from Fact Type to Entity Type in 'Entity Type nests Fact Type', reference from Entity Type to Domain Object Type in 'Entity Type is a kind of Domain Object Type', reference from Domain Object Type to Object Type in 'Domain Object Type is a kind of Object Type']
    has_one :domain_object_type, :foreign_key => :entity_type_object_type_id, :dependent => :destroy

    # Domain Object Type is a kind of Object Type
    # REVISIT: [reference from Fact Type to Type Inheritance in 'Type Inheritance is a kind of Fact Type', reference from Type Inheritance to Entity Type in 'Entity Type is subtype of super-Entity Type', reference from Entity Type to Domain Object Type in 'Entity Type is a kind of Domain Object Type', reference from Domain Object Type to Object Type in 'Domain Object Type is a kind of Object Type']
    has_one :domain_object_type, :foreign_key => :type_inheritance_subtype_object_type_id, :dependent => :destroy

    # Domain Object Type is a kind of Object Type
    # REVISIT: [reference from Fact Type to Type Inheritance in 'Type Inheritance is a kind of Fact Type', reference from Type Inheritance to Entity Type in 'Entity Type is subtype of super-Entity Type', reference from Entity Type to Domain Object Type in 'Entity Type is a kind of Domain Object Type', reference from Domain Object Type to Object Type in 'Domain Object Type is a kind of Object Type']
    has_one :domain_object_type, :foreign_key => :type_inheritance_supertype_object_type_id, :dependent => :destroy

    # Instance is of Object Type
    has_many :instances, :foreign_key => :object_type_id, :dependent => :destroy

    # Domain Object Type is a kind of Object Type
    # REVISIT: [reference from Object Type to Domain Object Type in 'Domain Object Type is a kind of Object Type', reference from Domain Object Type to Value Type in 'Value Type is a kind of Domain Object Type', reference from Value Type to Value Type in 'Value Type is subtype of super-Value Type', reference from Value Type to Domain Object Type in 'Value Type is a kind of Domain Object Type', reference from Domain Object Type to Object Type in 'Domain Object Type is a kind of Object Type']
    has_one :domain_object_type, :foreign_key => :value_type_supertype_object_type_id, :dependent => :destroy

    # Object Type plays Role
    has_many :roles, :foreign_key => :object_type_id, :dependent => :destroy

    # Object Type Shape is for Object Type
    # REVISIT: [reference from Shape to Object Type Shape in 'Object Type Shape is a kind of Shape', reference from Object Type Shape to Object Type in 'Object Type Shape is for Object Type']
    has_many :object_type_shapes, :foreign_key => :object_type_shape_object_type_id, :dependent => :destroy

    # Variable is for Object Type
    has_many :variables, :foreign_key => :object_type_id, :dependent => :destroy
  end
end

module Play
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'play_id'

    # Variable is restricted by Role
    belongs_to :role

    # Step involves incidental-Play
    belongs_to :step

    # Variable is restricted by Role
    belongs_to :variable

    # Play projects Role Ref
    has_one :role_ref, :foreign_key => :play_id, :dependent => :destroy

    # Step has input-Play
    has_many :steps, :foreign_key => :input_play_id, :dependent => :destroy

    # Step has output-Play
    has_many :steps, :foreign_key => :output_play_id, :dependent => :destroy
  end
end

module Population
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'population_id'

    # Population includes Fact
    has_many :facts, :foreign_key => :population_id, :dependent => :destroy

    # Population includes Instance
    has_many :instances, :foreign_key => :population_id, :dependent => :destroy

    # Population includes Role Value
    has_many :role_values, :foreign_key => :population_id, :dependent => :destroy
    has_many :facts, :through => :role_values
    has_many :roles, :through => :role_values
  end
end

module Query
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'concept_guid'

    # Query includes Variable
    has_many :variables, :foreign_key => :query_guid, :dependent => :destroy
  end
end

module Reading
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'reading_id'

    # Fact Type has Reading
    belongs_to :fact_type

    # Reading is in Role Sequence
    belongs_to :role_sequence

    # Reading Shape is for Reading
    # REVISIT: [reference from Shape to Reading Shape in 'Reading Shape is a kind of Shape', reference from Reading Shape to Reading in 'Reading Shape is for Reading']
    has_many :reading_shapes, :foreign_key => :reading_shape_reading_id, :dependent => :destroy
  end
end

module Role
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'role_id'

    # Implicit Fact Type is implied by Role and Implicit Fact Type is a kind of Fact Type
    belongs_to :implicit_fact_type_fact_type, :class_name => 'FactType'

    # Role belongs to Fact Type
    belongs_to :fact_type

    # Object Type plays Role
    belongs_to :object_type

    # Ring Constraint has other-Role
    # REVISIT: [reference from Constraint to Ring Constraint in 'Ring Constraint is a kind of Constraint', reference from Ring Constraint to Role in 'Ring Constraint has other-Role']
    has_many :ring_constraints, :foreign_key => :ring_constraint_other_role_id, :dependent => :destroy

    # Role is of Ring Constraint
    # REVISIT: [reference from Constraint to Ring Constraint in 'Ring Constraint is a kind of Constraint', reference from Ring Constraint to Role in 'Role is of Ring Constraint']
    has_many :ring_constraints, :foreign_key => :ring_constraint_role_id, :dependent => :destroy

    # Role has role-Value Constraint
    # REVISIT: [reference from Constraint to Value Constraint in 'Value Constraint is a kind of Constraint', reference from Value Constraint to Role in 'Role has role-Value Constraint']
    has_one :value_constraint, :foreign_key => :value_constraint_role_id, :dependent => :destroy

    # Variable is restricted by Role
    has_many :plays, :foreign_key => :role_id, :dependent => :destroy

    # Fact Type Shape displays Role in Ordinal position
    has_many :role_displays, :foreign_key => :role_id, :dependent => :destroy

    # Role Sequence in Ordinal position includes Role
    has_many :role_refs, :foreign_key => :role_id, :dependent => :destroy

    # Role Value is of Role
    has_many :role_values, :foreign_key => :role_id, :dependent => :destroy
    has_many :facts, :through => :role_values

    # Variable projects Role
    has_one :variable, :foreign_key => :projection_id, :dependent => :destroy
  end
end

module RoleDisplay
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'role_display_id'

    # Fact Type Shape displays Role in Ordinal position
    belongs_to :role

    # Fact Type Shape displays Role in Ordinal position and Fact Type Shape is a kind of Shape
    belongs_to :fact_type_shape_shape, :class_name => 'Shape'

    # Role Name Shape is for Role Display
    # REVISIT: [reference from Shape to Role Name Shape in 'Role Name Shape is a kind of Shape', reference from Role Name Shape to Role Display in 'Role Name Shape is for Role Display']
    has_one :role_name_shape, :foreign_key => :role_name_shape_role_display_id, :dependent => :destroy

    # Role Display has Value Constraint Shape
    # REVISIT: [reference from Shape to Constraint Shape in 'Constraint Shape is a kind of Shape', reference from Constraint Shape to Value Constraint Shape in 'Value Constraint Shape is a kind of Constraint Shape', reference from Value Constraint Shape to Role Display in 'Role Display has Value Constraint Shape']
    has_one :value_constraint_shape, :foreign_key => :value_constraint_shape_role_display_id, :dependent => :destroy
  end
end

module RoleRef
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'role_ref_id'

    # Play projects Role Ref
    belongs_to :play

    # Role Sequence in Ordinal position includes Role
    belongs_to :role

    # Role Sequence in Ordinal position includes Role
    belongs_to :role_sequence
  end
end

module RoleSequence
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'guid'

    # Presence Constraint covers Role Sequence
    # REVISIT: [reference from Constraint to Presence Constraint in 'Presence Constraint is a kind of Constraint', reference from Presence Constraint to Role Sequence in 'Presence Constraint covers Role Sequence']
    has_many :presence_constraints, :foreign_key => :presence_constraint_role_sequence_guid, :dependent => :destroy

    # Subset Constraint covers subset-Role Sequence
    # REVISIT: [reference from Constraint to Set Constraint in 'Set Constraint is a kind of Constraint', reference from Set Constraint to Subset Constraint in 'Subset Constraint is a kind of Set Constraint', reference from Subset Constraint to Role Sequence in 'Subset Constraint covers subset-Role Sequence']
    has_many :subset_constraints, :foreign_key => :subset_constraint_subset_role_sequence_guid, :dependent => :destroy

    # Subset Constraint covers superset-Role Sequence
    # REVISIT: [reference from Constraint to Set Constraint in 'Set Constraint is a kind of Constraint', reference from Set Constraint to Subset Constraint in 'Subset Constraint is a kind of Set Constraint', reference from Subset Constraint to Role Sequence in 'Subset Constraint covers superset-Role Sequence']
    has_many :subset_constraints, :foreign_key => :subset_constraint_superset_role_sequence_guid, :dependent => :destroy

    # Reading is in Role Sequence
    has_many :readings, :foreign_key => :role_sequence_guid, :dependent => :destroy

    # Role Sequence in Ordinal position includes Role
    has_many :role_refs, :foreign_key => :role_sequence_guid, :dependent => :destroy

    # Set Comparison Constraint has in Ordinal position Role Sequence
    has_many :set_comparison_roles, :foreign_key => :role_sequence_guid, :dependent => :destroy
  end
end

module RoleValue
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'fact_guid'

    # Role Value fulfils Fact
    belongs_to :fact

    # Instance plays Role Value
    belongs_to :instance

    # Population includes Role Value
    belongs_to :population

    # Role Value is of Role
    belongs_to :role
  end
end

module SetComparisonRole
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'set_comparison_roles_id'

    # Set Comparison Constraint has in Ordinal position Role Sequence and Set Comparison Constraint is a kind of Set Constraint and Set Constraint is a kind of Constraint
    belongs_to :set_comparison_constraint_constraint, :class_name => 'Constraint'

    # Set Comparison Constraint has in Ordinal position Role Sequence
    belongs_to :role_sequence
  end
end

module Shape
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'guid'

    # Constraint Shape is a kind of Shape and Constraint Shape is for Constraint
    belongs_to :constraint_shape_constraint, :class_name => 'Constraint'

    # Model Note Shape is a kind of Shape and Model Note Shape is for Context Note
    belongs_to :model_note_shape_context_note, :class_name => 'ContextNote'

    # Shape is in ORM Diagram and ORM Diagram is a kind of Diagram
    belongs_to :orm_diagram_diagram, :class_name => 'Diagram'

    # Constraint Shape is a kind of Shape and Ring Constraint Shape is a kind of Constraint Shape and Ring Constraint Shape is attached to Fact Type
    belongs_to :ring_constraint_shape_fact_type, :class_name => 'FactType'

    # Fact Type Shape is a kind of Shape and Fact Type Shape is for Fact Type
    belongs_to :fact_type_shape_fact_type, :class_name => 'FactType'

    # Object Type Shape is a kind of Shape and Object Type Shape is for Object Type
    belongs_to :object_type_shape_object_type, :class_name => 'ObjectType'

    # Reading Shape is a kind of Shape and Reading Shape is for Reading
    belongs_to :reading_shape_reading, :class_name => 'Reading'

    # Constraint Shape is a kind of Shape and Value Constraint Shape is a kind of Constraint Shape and Role Display has Value Constraint Shape
    belongs_to :value_constraint_shape_role_display, :class_name => 'RoleDisplay'

    # Role Name Shape is a kind of Shape and Role Name Shape is for Role Display
    belongs_to :role_name_shape_role_display, :class_name => 'RoleDisplay'

    # Constraint Shape is a kind of Shape and Value Constraint Shape is a kind of Constraint Shape and Value Constraint Shape is for Object Type Shape and Object Type Shape is a kind of Shape
    belongs_to :value_constraint_shape_object_type_shape_shape, :class_name => 'Shape'

    # Objectified Fact Type Name Shape is a kind of Shape and Objectified Fact Type Name Shape is for Fact Type Shape and Fact Type Shape is a kind of Shape
    belongs_to :objectified_fact_type_name_shape_fact_type_shape_shape, :class_name => 'Shape'

    # Reading Shape is a kind of Shape and Fact Type Shape has Reading Shape and Fact Type Shape is a kind of Shape
    belongs_to :reading_shape_fact_type_shape_shape, :class_name => 'Shape'

    # Fact Type Shape is a kind of Shape
    # REVISIT: [reference from Role Display to Fact Type Shape in 'Fact Type Shape displays Role in Ordinal position', reference from Fact Type Shape to Shape in 'Fact Type Shape is a kind of Shape']
    has_one :fact_type_shape, :foreign_key => :fact_type_shape_guid, :dependent => :destroy

    # Fact Type Shape is a kind of Shape
    # REVISIT: [reference from Shape to Objectified Fact Type Name Shape in 'Objectified Fact Type Name Shape is a kind of Shape', reference from Objectified Fact Type Name Shape to Fact Type Shape in 'Objectified Fact Type Name Shape is for Fact Type Shape', reference from Fact Type Shape to Shape in 'Fact Type Shape is a kind of Shape']
    has_one :fact_type_shape, :foreign_key => :objectified_fact_type_name_shape_fact_type_shape_guid, :dependent => :destroy

    # Fact Type Shape is a kind of Shape
    # REVISIT: [reference from Shape to Reading Shape in 'Reading Shape is a kind of Shape', reference from Reading Shape to Fact Type Shape in 'Fact Type Shape has Reading Shape', reference from Fact Type Shape to Shape in 'Fact Type Shape is a kind of Shape']
    has_one :fact_type_shape, :foreign_key => :reading_shape_fact_type_shape_guid, :dependent => :destroy

    # Object Type Shape is a kind of Shape
    # REVISIT: [reference from Shape to Constraint Shape in 'Constraint Shape is a kind of Shape', reference from Constraint Shape to Value Constraint Shape in 'Value Constraint Shape is a kind of Constraint Shape', reference from Value Constraint Shape to Object Type Shape in 'Value Constraint Shape is for Object Type Shape', reference from Object Type Shape to Shape in 'Object Type Shape is a kind of Shape']
    has_one :object_type_shape, :foreign_key => :value_constraint_shape_object_type_shape_guid, :dependent => :destroy
  end
end

module Step
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'step_id'

    # Step falls under Alternative Set
    belongs_to :alternative_set

    # Step specifies Fact Type
    belongs_to :fact_type

    # Step has input-Play
    belongs_to :input_play, :class_name => 'Play'

    # Step has output-Play
    belongs_to :output_play, :class_name => 'Play'

    # Step involves incidental-Play
    has_many :plays, :foreign_key => :step_id, :dependent => :destroy
  end
end

module Unit
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'concept_guid'

    # Value is in Unit
    # REVISIT: [reference from Allowed Range to Value Range in 'Value Constraint allows Value Range', reference from Value Range to Bound in 'Value Range has maximum-Bound', reference from Bound to Value in 'Bound has Value', reference from Value to Unit in 'Value is in Unit']
    has_many :values, :foreign_key => :value_range_maximum_bound_value_unit_guid, :dependent => :destroy
    has_many :literals, :through => :values

    # Value is in Unit
    # REVISIT: [reference from Allowed Range to Value Range in 'Value Constraint allows Value Range', reference from Value Range to Bound in 'Value Range has minimum-Bound', reference from Bound to Value in 'Bound has Value', reference from Value to Unit in 'Value is in Unit']
    has_many :values, :foreign_key => :value_range_minimum_bound_value_unit_guid, :dependent => :destroy
    has_many :literals, :through => :values

    # Unit is derived from base-Unit
    has_many :derivations, :foreign_key => :base_unit_guid, :dependent => :destroy
    has_many :units, :through => :derivations

    # Unit is derived from base-Unit
    has_many :derivations, :foreign_key => :derived_unit_guid, :dependent => :destroy
    has_many :units, :through => :derivations

    # Value is in Unit
    # REVISIT: [reference from Facet Value to Value in 'Value Type defines Facet as having Value', reference from Value to Unit in 'Value is in Unit']
    has_many :values, :foreign_key => :value_unit_guid, :dependent => :destroy
    has_many :literals, :through => :values

    # Value is in Unit
    # REVISIT: [reference from Instance to Value in 'Instance has Value', reference from Value to Unit in 'Value is in Unit']
    has_many :values, :foreign_key => :value_unit_guid, :dependent => :destroy
    has_many :literals, :through => :values

    # Value Type is of Unit
    # REVISIT: [reference from Object Type to Domain Object Type in 'Domain Object Type is a kind of Object Type', reference from Domain Object Type to Value Type in 'Value Type is a kind of Domain Object Type', reference from Value Type to Unit in 'Value Type is of Unit']
    has_many :value_types, :foreign_key => :value_type_unit_guid, :dependent => :destroy

    # Value is in Unit
    # REVISIT: [reference from Variable to Value in 'Variable is bound to Value', reference from Value to Unit in 'Value is in Unit']
    has_many :values, :foreign_key => :value_unit_guid, :dependent => :destroy
    has_many :literals, :through => :values
  end
end

module Variable
  extend ActiveSupport::Concern
  included do
    self.primary_key = 'variable_id'

    # Variable is for Object Type
    belongs_to :object_type

    # Query includes Variable
    belongs_to :query

    # Variable projects Role
    belongs_to :projection, :class_name => 'Role'

    # Variable is bound to Value and Value is in Unit
    belongs_to :value_unit, :class_name => 'Unit'

    # Variable is bound to Aggregate over aggregated-Variable
    has_many :aggregations, :foreign_key => :aggregated_variable_id, :dependent => :destroy

    # Variable is bound to Aggregate over aggregated-Variable
    has_many :aggregations, :foreign_key => :variable_id, :dependent => :destroy

    # Variable is restricted by Role
    has_many :plays, :foreign_key => :variable_id, :dependent => :destroy
  end
end
