module ActiveFacts
  module CQL
    grammar Concepts
      rule concept
        entity_type
        / data_type
        / fact_type
      end

      rule entity_type
        s name:id s
        sup:(
          subtype_prefix supertype_list
          / ( s '=' s / defined_as ) entity
          / is  # Semantically, this syntax requires non-nil identification
        )
        s identification
          entity_conditions
        s ';' s
        {
          def value
            [ name.text_value,
              [
                :entity_type,
                sup.respond_to?(:supertype_list) ? sup.supertype_list.value : [],
                identification.text_value.empty? ? nil : identification.value,
                entity_conditions.conditions
              ]
            ]
          end
        }
      end

      rule supertype_list
        primary:id
        alternate_supertypes:( s ',' s !identified_by name:id s )*
        { def value
            [primary.text_value]+alternate_supertypes.elements.map{|sup| sup.name.text_value}
          end
        }
      end

      rule identification
        identified_by role_list   { def value; {:roles => role_list.roles }; end }
        /
        reference_mode  { def value; {:mode => mode_name.text_value}; end }
        /
        ''      # REVISIT: Find out why makng identification optional didn't work (for subtypes)
      end

      # Identified by roles...
      rule role_list 
        head:role_player s tail:( ( and S / ',' s ) role:role_player s )*
        {
          def roles
            [head.text_value] + tail.elements.map{|i| i.role.text_value}
          end
        }
      end

          rule role_player
            id0:role_player_id '-' (s id1:role_player_id ( s id2:role_player_id )? )?
            /
            id0:role_player_id (s id1:role_player_id ( s '-' id2:role_player_id / s id2:role_player_id )? )?
          end

          rule role_player_id
            !role_list_sep id
          end

          rule role_list_sep
            (where / and)
          end

          rule reference_mode
            # REVISIT: Adopt ORM2-style reference mode patterns here
            '(' s '.' s mode_name:id s ')' s
          end

      rule entity_conditions
        (':' / where)? s c:conditions?
        {
          def conditions
            c.empty? ? [] : c.condition_list
          end
        }
      end

    end
  end
end
