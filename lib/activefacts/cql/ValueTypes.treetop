#
#       ActiveFacts CQL Parser.
#       Parse rules relating to ValueType definitions.
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
module ActiveFacts
  module CQL
    grammar ValueTypes
      rule value_type
        s name:id
        written_as
        base:id s
        value_type_parameters
        value_type_unit
        r:restriction?
	mapping_pragmas
        s ';' s
        {
          def defined_type
            [
              :value_type,
              base.value,
              value_type_parameters.values,
              value_type_unit.unit_name,
              (!r.empty? ? r.ranges : []),
	      mapping_pragmas.value
            ]
          end

          def value
            [ name.value,
              defined_type
            ]
          end
        }
      end

      rule value_type_parameters
        '(' s tpl:type_parameter_list? ')' s
          { def values; tpl.empty? ? [] : tpl.values; end }
        / s
          { def values; []; end }
      end

      rule value_type_unit
        !restricted units s
          { def unit_name; units.text_value; end }
        / s
          { def unit_name; nil; end }
      end

      rule unit_definition
        numerator:number denominator:(s '/' s number)?
        units s
        offset:(('+' / '-') s number)
        'makes' s ('approximately' s)?
        singular:id plural:(s '/' s id)?
        (s '[' s 'ephemeral' s ']')?
      end

      rule type_parameter_list
        head:number s tail:( ',' s number s )*
        {
          def values
            [head.value] + tail.elements.map{|i| i.number.value}
          end
        }
      end

      rule units
        (unit (s !restricted unit)* (s '/' s unit (s !restricted unit)*)?)
      end

      rule unit
        unit_name:id ('^' '-'? [0-9])?
      end

      rule restriction
        restricted s to s range_list s units?
        {
          def ranges
            range_list.ranges
          end
        }
      end

      rule range_list
        '{' s
          head:range s tail:( ',' s range )*
        '}' s
        {
          def ranges
            [head.value] + tail.elements.map{|e| e.range.value }
          end
        }
      end

    end
  end
end
