module ActiveFacts
  grammar CQL
    include LexicalRules
    include Expressions
    include Concepts

    rule cql_file
      s seq:definition*
      {
	def definitions
	  seq.elements.map{|e| e.value }
	end
	def inspect
	  definitions.map{|d|
	      d.inspect
	    }*"\n"
	end
	def compile
	  definitions.each{|d|
	      p d
	    }
	end
      }
    end

    # Each definition has a value method that returns an array like
    # either [name, [kind, definition]] or [name, kind]:
    rule definition
      vocabulary
      / import
      / constraint
      / concept
    end

    rule vocabulary
      'vocabulary' S id s ';' s
      {
	def value
	  puts "vocabulary #{id.text_value}: not implemented"
	  [ id.text_value, [ :vocabulary ] ]
	end
      }
    end

    rule import
      'import' S id alias_list ';' s
      {
	def value
	  puts "import #{id.text_value}: not implemented"
	  [ id.text_value, [ :import ] ]
	end
      }
    end

    rule alias_list
      ( s ',' s 'alias' S aliased:id S 'as' S alias:id s )*
    end

    rule constraint
      'NOT IMPLEMENTED'
    end

  end
end
