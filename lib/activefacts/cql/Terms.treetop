#
#       ActiveFacts CQL Parser.
#       Parse rules relating to Term names
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
module ActiveFacts
  module CQL
    grammar Terms
      rule term_definition_name
        id s
         t:(!non_term_def id s)*
        {
	  def value
            t.elements.inject([
              id.value
            ]){|a, e| a << e.id.value}*' '
          end
        }
      end

      rule non_term_def
        mapping_pragmas entity_prefix
        / mapping_pragmas written_as			      # Value type
        / mapping_pragmas is s (independent s)? where         # Objectified type
        / non_role_word
	/ identified_by			    # as in: "a kind of X identified by..."
	/ unit
      end

      rule entity_prefix
        is s (independent s )? identified_by
	/
	subtype_prefix (independent s )? term_definition_name
	&{|e| input.context.object_type(e[2].value, "subtype"); true }
      end

      rule prescan
        s (
          term_definition_name mapping_pragmas entity_prefix
		&{|e| input.context.object_type(e[0].value, "entity type"); true }
          /
          t1:term_definition_name mapping_pragmas written_as t2:term_definition_name
                &{|e| input.context.object_type(e[0].value, "value type")
		  input.context.object_type(e[3].value, "value type")
		  true
		}
          /
          term_definition_name s mapping_pragmas is s (independent s )? where
                &{|e| input.context.object_type(e[0].value, "objectified_fact_type"); true }
        )?
        prescan_rest
        &{|s|
	  # Wipe any terminal failures that were added:
          @terminal_failures = []
          @max_terminal_failure_index = start_index

          # puts "========== prescan is complete on #{(s.map{|e|e.text_value}*" ").inspect} =========="
          false
        }
      end

      # Do a first-pass mainly lexical analysis, looking for role name definitions and adjectives,
      # for use in detecting terms later.
      rule prescan_rest
        &{|s| input.context.reset_role_names }
        (
          context_note                      # Context notes have different lexical conventions
          / '(' as S term_definition_name s ')' s    # Prescan for a Role Name
            &{|s| input.context.role_name(s[3].value) }
                                            # Adjective definitions
          / new_adjective_term
          / global_term                     # If we see A B - C D, don't recognise B as a new adjective for C D.
          / id
          / range                           # Covers all numbers and strings
          / comparator                      # handle two-character operators
          / S                               # White space and comments, must precede / and *
          / [-+{}\[\].,:^/%*()]             # All other punctuation and operators
        )* [?;] s
      end

      rule new_adjective_term
        !global_term adj:id '-' lead_intervening s global_term	  # Definitely a new leading adjective for this term
          &{|s| input.context.new_leading_adjective_term([s[1].text_value, s[3].value].compact*" ", s[5].text_value) }
        /
        global_term s trail_intervening '-' !global_term adj:id	  # Definitely a new trailing adjective for this term
          &{|s| input.context.new_trailing_adjective_term([s[2].value, s[5].text_value].compact*" ", s[0].text_value) }
      end

      rule lead_intervening	# Words intervening between a new adjective and the term
	(S !global_term id)*
	{
	  def value
	    elements.size == 0 ? nil : elements.map{|e| e.id.text_value}*" "
	  end
	}
      end

      rule trail_intervening	# Words intervening between a new adjective and the term
	(!global_term id S)*
	{
	  def value
	    elements.size == 0 ? nil : elements.map{|e| e.id.text_value}*" "
	  end
	}
      end

      # This is the rule to use after the prescan; it only succeeds on a complete term or role reference
      rule term
        s head:id x             &{|s| w = s[1].text_value; input.context.term_starts?(w, s[2]) }
        tail:(s '-'? s w:id     &{|s| w = s[3].text_value; input.context.term_continues?(w) })*
                                &{|s| input.context.term_complete? }
        {
	  def ast quantifier = nil, function_call = nil, role_name = nil, value_constraint = nil, literal = nil, objectification_join = nil
	    t = x.context[:term]
	    gt = x.context[:global_term]
	    leading_adjective = t[0...-gt.size-1] if t.size > gt.size and t[-gt.size..-1] == gt
	    trailing_adjective = t[gt.size+1..-1] if t.size > gt.size and t[0...gt.size] == gt
	    Compiler::RoleRef.new(gt, leading_adjective, trailing_adjective, quantifier, function_call, role_name, value_constraint, literal, objectification_join)
	  end

	  def value		# Sometimes we just want the full term name
            x.context[:term]
          end
        }
	/
	s head:id '-' s term	&{|s| s[4].ast.leading_adjective == nil }
	{
	  def ast quantifier = nil, function_call = nil, role_name = nil, value_constraint = nil, literal = nil, objectification_join = nil
	    ast = term.ast(quantifier, function_call, role_name, value_constraint, literal, objectification_join)
	    ast.leading_adjective = head.text_value
	    ast
	  end
	}
      end

      rule x
	'' <SavedContext>
      end

      rule global_term
        # This rule shouldn't be used outside the prescan, it will memoize the wrong things.
        head:id x    &{|s| input.context.term_starts?(s[0].text_value, s[1]) }
        tail:(s w:id &{|s| input.context.term_continues?(s[1].text_value) } )*
        { def value
            tail.elements.inject(head.value) { |t, e| "#{t} #{e.w.value}" }
          end
        }
      end

      rule non_role_word
        # These words are illegal in (but maybe ok following) a reading where a role word is expected:
        and
        / where
        / if
        / only
        / or
        / quantifier
        / value_constraint
        / but
	/ 'occurs' s quantifier s 'time' 
      end

    end
  end
end
