#
#       ActiveFacts CQL Parser.
#       Parse rules relating to Term names
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
module ActiveFacts
  module CQL
    grammar Terms
      rule term_definition_name
        id s
         t:(!non_term_def id s)*
        {
	  def value
            t.elements.inject([
              id.value
            ]){|a, e| a << e.id.value}*' '
          end

	  def node_type
	    :term
	  end
        }
      end

      rule non_term_def
        mapping_pragmas entity_prefix
        / mapping_pragmas written_as			      # Value type
        / mapping_pragmas is_where			      # Objectified type
        / non_phrase
	/ identified_by					      # as in: "a kind of X identified by..."
	/ unit
      end

      rule entity_prefix
        is s (independent s )? identified_by
	/
	subtype_prefix (independent s )? term_definition_name
	&{|e| input.context.object_type(e[2].value, "subtype") }
      end

      rule prescan
        s (
          term_definition_name mapping_pragmas entity_prefix
		&{|e| input.context.object_type(e[0].value, "entity type") }
          /
          t1:term_definition_name mapping_pragmas written_as t2:term_definition_name
                &{|e| input.context.object_type(e[0].value, "value type")
		  input.context.object_type(e[3].value, "value type")
		}
          /
          term_definition_name s mapping_pragmas is s (independent s )? where
                &{|e| input.context.object_type(e[0].value, "objectified_fact_type") }
        )?
        prescan_rest
        &{|s|
	  # Wipe any terminal failures that were added:
          @terminal_failures = []
          @max_terminal_failure_index = start_index

          # puts "========== prescan is complete on #{(s.map{|e|e.text_value}*" ").inspect} =========="
          false
        }
      end

      # Do a first-pass mainly lexical analysis, looking for role name definitions and adjectives,
      # for use in detecting terms later.
      rule prescan_rest
        &{|s| input.context.reset_role_names }
        (
          context_note                      # Context notes have different lexical conventions
          / '(' as S term_definition_name s ')' s    # Prescan for a Role Name
            &{|s| input.context.role_name(s[3].value) }
	  / new_derived_value
          / new_adjective_term		    # Adjective definitions
          / global_term                     # If we see A B - C D, don't recognise B as a new adjective for C D.
          / id
          / range                           # Covers all numbers and strings
          / comparator                      # handle two-character operators
          / S                               # White space and comments, must precede / and *
          / [-+{}\[\].,:^/%*()]             # All other punctuation and operators
        )* [?;] s
      end

      # Derived values are new terms introduced by an = sign before an expression
      # This rule handles trailing words of a multi-word derived value
      rule derived_value_continuation
        s '-' tail:(s !global_term !(that/who) id)*
	{
	  def value
	    tail.elements.map{|e| e.id.text_value}
	  end
	}
      end

      rule new_derived_value
        !global_term id derived_value_continuation? s '='
	  &{|s|
	    name = [s[1].text_value] + (s[2].empty? ? [] : s[2].value)
	    input.context.object_type(name*' ', "derived value type")
	  }
	/
	'=' s !global_term id derived_value_continuation? s (that/who)
	  &{|s|
	    name = [s[3].text_value] + (s[4].empty? ? [] : s[4].value)
	    input.context.object_type(name*' ', "derived value type")
	  }
      end

      # Used during the pre-scan, match a term with new adjective(s)
      rule new_adjective_term
        !global_term adj:id '-' '-'? lead_intervening s global_term	  # Definitely a new leading adjective for this term
          &{|s| adj = [s[1].text_value, s[4].value].compact*" "; input.context.new_leading_adjective_term(adj, s[6].text_value) }
        /
        global_term s trail_intervening '-' '-'? !global_term adj:id	  # Definitely a new trailing adjective for this term
          &{|s| adj = [s[2].value, s[6].text_value].compact*" "; input.context.new_trailing_adjective_term(adj, s[0].text_value) }
      end

      rule lead_intervening	# Words intervening between a new adjective and the term
	(S !global_term id)*
	{
	  def value
	    elements.size == 0 ? nil : elements.map{|e| e.id.text_value}*" "
	  end
	}
      end

      rule trail_intervening	# Words intervening between a new adjective and the term
	(!global_term id S)*
	{
	  def value
	    elements.size == 0 ? nil : elements.map{|e| e.id.text_value}*" "
	  end
	}
      end

      # This is the rule to use after the prescan; it only succeeds on a complete term or role reference
      rule term
        s head:id x             &{|s| w = s[1].text_value; input.context.term_starts?(w, s[2]) }
        tail:(s '-'? dbl:'-'? s w:id     &{|s| w = s[4].text_value; input.context.term_continues?(w) })*
                                &{|s| input.context.term_complete? }
        {
	  def ast quantifier = nil, function_call = nil, role_name = nil, value_constraint = nil, literal = nil, nested_clauses = nil
	    t = x.context[:term]
	    gt = x.context[:global_term]
	    if t.size > gt.size and t[-gt.size..-1] == gt
	      leading_adjective = t[0...-gt.size-1]
	      leading_adjective.sub!(/ /, '-') if !tail.elements[0].dbl.empty?
	    end
	    if t.size > gt.size and t[0...gt.size] == gt
	      trailing_adjective = t[gt.size+1..-1]
	      trailing_adjective.sub!(/ (\S*)\Z/, '-\1') if !tail.elements[-1].dbl.empty?
	    end
	    Compiler::VarRef.new(gt, leading_adjective, trailing_adjective, quantifier, function_call, role_name, value_constraint, literal, nested_clauses)
	  end

	  def value		# Sometimes we just want the full term name
            x.context[:term]
          end
	  def node_type; :term; end
        }
	/
	s head:id '-' '-'? s term	&{|s| s[5].ast.leading_adjective == nil }
	{
	  def ast quantifier = nil, function_call = nil, role_name = nil, value_constraint = nil, literal = nil, nested_clauses = nil
	    ast = term.ast(quantifier, function_call, role_name, value_constraint, literal, nested_clauses)
	    ast.leading_adjective = head.text_value
	    ast
	  end
	  def node_type; :term; end
	}
      end

      rule x
	'' <SavedContext>
      end

      rule global_term
        # This rule shouldn't be used outside the prescan, it will memoize the wrong things.
        head:id x    &{|s| input.context.term_starts?(s[0].text_value, s[1]) }
        tail:(s w:id &{|s| input.context.term_continues?(s[1].text_value) } )*
        { def value
            tail.elements.inject(head.value) { |t, e| "#{t} #{e.w.value}" }
          end
        }
      end

      rule non_phrase
        # These words are illegal in (but maybe ok following) a clause where a phrase is expected:
        and
        / but
        / if
        / role_list_constraint_followers
        / only
        / or
        / quantifier
        / returning
        / then
        / value_constraint
        / where
      end

    end
  end
end
