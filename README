ActiveFacts
-----------

ActiveFacts is a set of tools for designing and
implementing data oriented applications and databases,
using semantic modeling, including a new language for
semantic modeling and queries, the Constellation Query
Language.

What is Semantic (Fact-based) modeling?
---------------------------------------

Semantic-based information modeling is a form of conceptual
modeling that operates at a higher level than either UML
(and other object modeling approaches) or traditional ER
(entity-relationship) data modeling. It uses natural
verbalisations to define information in terms of concepts
(value types and entity types) and elementary fact types
(relationships between concepts).

A fact type in elementary form cannot be broken down into
smaller parts. Each fact type uses natural verbalisation,
and the combination makes fact-based models easier to
understand than any other kind of information model.
Because it's easier to understand, it's easier to directly
check and verify with business domain experts.  The main
benefit of the fact-based approach is the confidence that
you're building the right software.

While defining the structure of your information, it's
important also to add constraints that restrict the
possible data. The most common case is to add uniqueness
constraints, which are used to define requirements like
each person having only one family name. These constraints
can be further checked through the use of sample data. A
variety of standard constraint types gives the designer
flexibility in defining the business rules. Again, the
constraints are expressed in natural English and may
be checked directly by the business expert.

An automatic process transforms any semantic model into an
efficient database design in third normal form, and also
generates code (object-oriented class libraries) to
create, access and update that database.  The designer
does not need to know SQL or how to normalize a database
design.

It's also possible to express queries using the semantic
model, which can be automatically translated into queries
against the SQL database, and the results transformed back
into the conceptual form. No such conceptual query language
has become widely used, but ActiveFacts introduces the
Constellation Query Language.

Why ActiveFacts?
----------------

Previously, semantic modeling has only been used as a
design techique for databases. ActiveFacts takes it to a
new level, by providing a semantic runtime.  Your programs
don't have to be written in SQL, and so are freed from
dependence on the physical storage structures produced
during the normalisation process. The ability to isolate
the code from the physical structure has big benefits when
your requirements change, because the consequences of any
change only affects that part of your code, and don't leak
into the rest of the application.  It's also possible (and
beneficial!) to use ActiveFacts to design programs that
don't use a database at all.

For every user action in any application, a single query
can be defined that provides all the data required to
respond to that action. There's no need to execute
multiple queries, fetching this, that, and the other. All
required results are fetched at once, which improves
application structure, performance, and even concurrency.
These result "constellations" may be modified in memory
and saved to the database in larger transactions. The
application naturally falls into a service-oriented (or
REST) architecture.

So in summary, using ActiveFacts, you can:

a) be sure you're building the right software earlier

b) structure your application better

c) change the information model with less rework

d) provide easy ad-hoc query facilities

Status
------

ActiveFacts can read models created in several ways. You
can use NORMA, the Neumont Object Role Modeling Architect,
to produce a model as an ORM2 diagram, or you can write
CQL (Constellation Query Language) statements. NORMA
models can be converted to CQL. At the time of writing,
the CQL language elements for defining data models are
almost fully implemented. Finally, tools are in progress
to reverse-engineer an existing relational database into
the conceptual form.

You can generate a Ruby API (which uses the ActiveFacts
Constellation API as a basis) from any semantic model. The
generated API makes it possible to create any information
structure (fact population) allowed by that model.
Database Persistence features are not yet implemented for
the Constellation API.

ActiveFacts uses code generated from a meta-model which
defines what a semantic model may contain. Look in the
examples directory to find the Metamodel files.

The meta-model has also been manually mapped to a
relational schema. After further refinement this will
allow any semantic model to be retrieved, manipulated and
stored in a database.

Download and play
-----------------

To look at ActiveFacts, install Subversion (either
<http://subversion.tigris.org/> or one of the bundles
like Tortoise SVN, cygwin, etc), and issue the checkout
instruction on the RubyForge webpage listed above.
You can also browse the files online at
<http://rubyforge.org/scm/?group_id=3253>.

My NORMA models are checked into the "examples/norma"
directory, and "examples/images" contains screenshots of
all the model diagrams, so folk who don't have NORMA or
VS2005 can look at them. The CQL and Ruby code derived
form these models is also published.

Some of the models are simple, to demonstrate an idea, but
there are several real-life models as well.

If you have Ruby installed <www.ruby-lang.org> you can
convert a NORMA model to CQL using the command:

ruby -Ilib bin/generate.rb --cql MyModel.orm

Alternatively, the --ruby option emits Ruby code for use
with the Constellation API:

ruby -Ilib bin/generate.rb --ruby MyModel.orm

NORMA
-----

NORMA is the latest in a line of products (stretching back
two decades) which implement the Object Role Modeling, ORM.
ORM, a fact based modeling notation, is now in version 2.
NORMA is open source, a design tool that runs within
Microsoft Visual Studio 2005 - Professional Edition. The
Express Edition doesn't have the required DSL Tools support.

You can download the latest version of NORMA (and source
code, if you wish) from <http://sourceforge.net/orm>. For
more about ORM2, see <http://www.orm.net> and other
resources.

Notes on the Metamodel and its SQL
----------------------------------

My meta-model merges mandatory, uniqueness and frequency
constraints into one "Presence Constraint" object. This
is because all three constraint types have to do with
the number of times a role or role sequence may be played.

For object types (Entity, Value and Objectified Facts),
I have separate classes in the Ruby API, but these are
absorbed into one ObjectType table in the SQL. This
allows proper referential integrity from the Role table.
A consequence is that in sample populations, the entity
instances and value instances are absorbed into one
Instance table as well, with a nullable Value field.

The metamodel supports sub-models and imported models,
allowing composition. It also supports units allowing
dimensional analysis for value types. CQL syntax for
these has not yet been added.

Future
------

Next on my list of tasks (not strictly in order) is:

* Complete the implementation of external constraints in CQL

* Add relational composition to transform an elementary
  semantic model down to a relational schema.

* Implement database persistence for Constellation API.

* Start translating CQL queries to call a conceptual query
  API, which will generate SQL and return a constellation.

* Redo the reverse engineering using Sequel or DataMapper to
  eliminate the dependence on AR, CPK and DRYSql.

* Further reverse engineer the ER (compound) schema to an
  elementary schema.

More information
----------------

The ActiveFacts project lives on RubyForge, with source
code access details here:
<http://rubyforge.org/scm/?group_id=3253>.

Status messages go to the Yahoo information_modeling
group, which is also available as an NNTP feed on Gmane,
news:gmane.comp.programming.modeling.information.

Clifford Heath, clifford.heath@gmail.com.
