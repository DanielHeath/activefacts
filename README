ActiveFacts
-----------

Clifford Heath, 14 June 2007.

The ActiveFacts project lives on RubyForge, with access
details here: <http://rubyforge.org/scm/?group_id=3253>.

Status messages go to the Yahoo information_modeling
group, which is also available as an NNTP feed on Gmane,
news:gmane.comp.programming.modeling.information.

What is Fact-based modeling?
----------------------------

Fact-based information modeling is a form of conceptual
modeling that operates at a higher level than either UML
(and other object modeling approaches) or traditional ER
(entity-relationship) data modeling. It supports the
definition of conceptual information models that are
"elementary", meaning that every element (fact, rule and
constraint) is broken down to its simplest form, based
in pure logic.

With a model in elementary form, it's child's play to
check its correctness, as each feature can be verbalised
in short plain-language sentences as it's constructed.
Example data may be entered for each fact type which
allows automatic validation of constraints, and even
intuition about what missing constraints might be added.
It's possible to represent all constraint types that
are supported in both UML and in SQL, and quite a number
that are supported in neither, which gives the designer
a greater power to express business rules than either.

After the model has been fully validated, the tools
automatically construct correct, efficient and fully
normalized aggregations (class hierarchies or entity-
relationship models) that are provably congruent.

The perennial wars between DBAs and object modelers can
be finished forever, and the abstruse skills of database
normalization are almost irrelevant.

Why ActiveFacts?
----------------

ActiveFacts aims to take the technique of fact-based
modeling beyond what's been done anywhere previously,
and instead of just using it as a design technique, to
generate executable models. This means that:

a) You can query a database (instance of a model) using
the elementary form, and get back results in the same
form - so you never need to know the physical storage
details,

b) Queries span tables transparently, crossing conceptual
relationships without explicit database joins, and return
structured data in a hierarchical form, so for every
user action in an application, a single query can be
defined that provides all the data required to respond to
that action. There's no need to fetch this, that, and the
other. All required results are fetched at once, which
improves application structure, performance, and even
concurrency.

c) You can change the model in any way at any time and
the database will be automatically and incrementally
restructured to accommodate those changes, including by
quick change now and a cleanup migration later,

d) When a database must be restructured, any existing
queries that request facts which are unchanged (though
they may have ben moved to another table), those queries
are automatically and transparently rewritten to work
against the new physical structure,

e) The model may be maintained in both elementary form
and in compound (relational) form at the same time, and
both forms may be managed using the same API.

Status
------

ActiveFacts has fact-oriented API in Ruby, and can load
models in two forms. Currently, all it does is to emit
text to indicate that it has understood.

The Object-Oriented meta-model used by the API is also
congruent to a relational schema which is provided, so
any model may in future be retrieved, manipulated and
stored in a database.

ActiveFacts can currently read models from NORMA, which
are in elementary form (see below), and it can reverse
engineer the schemas of existing databases in SQL Server,
DB2 and Oracle. Other database products may be partially
supported already, including MySql, PostgreSQL, etc.
Reverse-engineered models are in compound form - mapping
them to elementary form is a separate task.

ActiveFacts relies on the database adapter infrastructure
of ActiveRecord, but needs additional fixes in the form
of DRYSql (with some further patches from me if they are
not yet incorporated into the released version), and the
Composite Primary Keys gem (again, with further patches
if not already incorporated).

NORMA
-----

NORMA is the latest in a line of products stretching back
two decades which implement the Object Role Modeling (now
version 2) fact based modeling notation. NORMA is a design
tool that is open source, but runs as an extension to 
Microsoft Visual Studio 2005 - Professional Edition (the
Express Edition doesn't have the ability to load plug-ins).

You can download the latest version of NORMA (and source
code, if you wish) from <http://sourceforge.net/orm>. For
more about ORM2, see <http://www.orm.net> and other
resources.

ActiveFacts is loading all the NORMA models I can find and
some I built myself. The restrictions of previous versions
are gone - all known features of NORMA are loaded.

Downloading
-----------

To look at ActiveFacts, install Subversion (either
<http://subversion.tigris.org/> or one of the bundles
like Tortoise SVN, cygwin, etc), and issue the checkout
instruction on the RubyForge webpage listed above.
You can also browse the files online at
<http://viewvc.rubyforge.mmmultiworks.com/cgi/viewvc.cgi/?root=activefacts>

My NORMA models are checked into the "examples/norma"
directory, and "examples/pdf" contains PDF versions of
all the model diagrams, so folk who don't have NORMA
or VS2005 can look at them.

Most of the models are trivial, except the Orienteering
model, which models the orienteering system currently
hosted at both <http://street.orienteering.com.au>
and <http://www.vicorienteering.asn.au/parkstreet/>. I
compete in these events, and have even built scoring
hardware for it using low-power microprocessors (not
yet in use). The point being that this is a *real life*
model, which will continue to be my main demonstration
model.

Though the provided models are mostly simple, ActiveFacts
has successfully reverse-engineered some large commercial
database schemas, including that of ManageSoft, with all
sub-products installed (265 tables).

If you have Ruby installed <www.ruby-lang.org> you can
load a NORMA model using the command:

ruby -I lib bin/read_norma.rb MyModel.orm

read_norma simply reads a NORMA file and spits out some
textual notes so you can see it's understood it.

If you also have ActiveRecord, DRLSql (patched with the
patches provided) and CPK (composite primary keys),
you can reverse engineer your own schema:

ruby -I lib bin/reflect.rb --dsn=Orienteering \
	--adapter=sqlserver --mode=ODBC --user=sa
	--password=

... or whatever ActiveRecord connection options are
appropriate to connect to your database.

Finally, I have a first pass at a Ruby DSL that you can
use to define models in this version. Many parts aren't
complete, but if you run the example and read the output,
you'll see how much already does work:

ruby -I lib examples/ruby/administration.rb

Metamodel
---------

ActiveFacts also contains a Metamodels directory which
has an SQL metamodel that matches my Ruby API. So far,
the API can't save or load models into an SQL database,
but that's feasible, it's just a matter of time. That
will allow construction of a web-based information
modeling tool. There's a PDF of the SQL schema as well
as the DDL for SQL Server.  This section contains some
notes on the mapping.

My meta-model merges mandatory, uniqueness and frequency
constraints into one "Presence Constraint" object. This
is because all three constraint types have to do with
the number of times a role or role sequence may be played.
This was agreed with Terry while he was reviewing my SQL
schema a month ago.

For object types (Entity, Value and Objectified Facts),
I have separate classes in the Ruby API, but these are
absorbed into one ObjectType table in the SQL. This
allows proper referential integrity from the Role table.
A consequence is that in sample populations, the entity
instances and value instances are absorbed into one
Instance table as well, with a nullable Value field.

Finally my API supports sub-models, and more than one named
Population, so that you can have a sample population used
for model validation, another as an initial population for
a production database, and even another for the production
database itself.

Sorry, but I haven't yet produced a UML model of the Ruby
API... that'll happen sometime. In the meantime, the code
itself in "lib/activefacts/base.rb" is pretty readable
even if you've never seen Ruby. Since Ruby uses "open
classes", similar to C#'s partial classes, I'm able to
omit from "base.rb" anything that relates to other aspects
of the API, like derivation etc.

Future
------

Next on my list of tasks (not strictly in order) is:

* Constructing a conceptual query API that can query a
  database instance using the compound schema, by rewriting
  the queries as SQL,

* Writing a textual language parser for ORM2 so models
  may be loaded (and perhaps exported) to a textual format
  for version management and model interchange. A book that
  will define an official textual language is forthcoming,
  but I might need to create an interim language before then.
  This will take the form either of a Ruby DSL or a properly
  parsed language with an ANTLR parser (usable as an ORM2
  modeling language with C#, Java, etc).

* Reverse engineering the ER (compound) schema to an ORM2
  (elementary) one.

* Testing. The basic framework for writing tests using
  RSpec is there, but I've been baaaad and started writing
  code *before* I had the tests written :-).

Tasks I'll then address in an uncertain order are:

* Absorbing an elementary model down to an ER schema,

* Converting conceptual queries against an elementary model
  into queries against the ER mapping of the same, and on
  executing them, converting the resultant compound fact
  populations back into elementary ones to match the original
  query.

* Automatically generating database migration code to preserve
  and transform an existing database to match changes to the
  conceptual model.

Thanks for your attention. I look forward to receiving any
feedback you have. I'm doing this work almost full-time,
self-funded for a time and after that, I need to find a way
to make a living from it :-). All offers considered!

Clifford Heath, clifford.heath@gmail.com.
